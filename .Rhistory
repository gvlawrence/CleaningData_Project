top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(count))
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
getwd()
submit()
submit()
submit()
submit()
7
?xyplot
library(lattice)
?xyplot
library(nlme)
xyplot(weight ~ Time)
weight
ls
BodtWeight
BodyWeight
Diet
library(nlme)
?nlme
View(BodyWeight)
xyplot(weight ~ Time |Diet, BodyWeight)
xyplot(weight ~ Time, BodyWeight)
xyplot(weight ~ Time |Diet, BodyWeight)
q <- xyplot(weight ~ Time |Diet, BodyWeight)
str(q)
q <- bwplot(weight ~ Time |Diet, BodyWeight)
q
?transform
?axis
?lines
?lines
?llines
?axis
?text
library(lattice)
library(datasets)
View(airquality)
View(airquality)
data(airquality)
?data
p <- xyplot(Ozone~Wind|factor(Month), data=airquality)
p
str(p)
?print.trellis
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
aq = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = aq, facets = . ~ Month)
aq
head(airquality)
head(aq)
rnorm(100)
?rnorm
?aes
g <- ggplot(movies, aes(votes, rating))
q
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) +geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth="loess")
qplot(votes, rating, data = movies, panel=panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.
# It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
library(swirl)
swirl()
0
menu()
0
0
menu()
quit()
swirl()
library(swirl)
swirl()
?title
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
View(faithful)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
quit()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
getwd()
swirl()
swirl()
packageVersion("swirl")
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Regression Models")
8
swirl()
swirl()
q()
swirl()
?cumsum
rnorm(10)
cumsum(rnorm(10))
cumsum(rnorm(10))/10
n<-10
means <- cumsum(rnorm(n))/(1:n)
means
v<-c(1,1,1,1,1,1,1,1,1,1)
cumsum(v)
mean2 <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
mean2
n=100
means <- cumsum(rnorm(n))/(1:n)
mean2 <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
means
mean2
means <- cumsum(rnorm(n))/(1:n)
mean2 <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
library(ggplot2)
ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
geom_hline(yintercept = 0.5) + geom_line(size = 2)
g<-ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g<-g+geom_hline(yintercept = 0.5) + geom_line(size = 2)
g
g<-ggplot(data.frame(x = 1:n, y = mean2), aes(x = x, y = y))
g<-g+geom_hline(yintercept = 0.5) + geom_line(size = 2)
g
ppois(15,lambda=15)
ppois(0,lambda=15)
ppois(10,lambda=15)
?reformulate
library(datasets)
ToothGrowth
swirl()
dice_sqr
sum(dice_sqr*dice_fair)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_high * dice_sqr) - edh^2
quit()
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
rexp(100,0.2)
rexp(100,0.2)/100
sum(rexp(100,0.2))/100
sum(rexp(100,0.2))/100
sum(rexp(100,0.2))/100
sum(rexp(100,0.2))/100
sum(rexp(100,0.2))/100
sum(rexp(100,0.2))/100
sum(rexp(500,0.2))/100
sum(rexp(500,0.2))/500
sum(rexp(500,0.2))/500
sum(rexp(500,0.2))/500
sum(rexp(500,0.2))/500
sum(rexp(500,0.2))/500
sum(rexp(5000,0.2))/5000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
sum(rexp(50000,0.2))/50000
l<.1/5
l<-.1/5
l
l<-1/5
l
source('~/.active-rstudio-document', echo=TRUE)
exp1 <- rexp(sims1, lambda1)
hist(exp1)
means_sim <- NULL
for (j in 1:sims1) means_sim <- c(means_sim, mean(rexp(n1,lambda1)))
hist(means_sim)
var_theory <- (1/lambda1)^2 / sims1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
sims1
```{r variance}
var_theory <- (1/lambda1)^2 / n1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
var_theory <- (1/lambda1)^2 / n1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
```{r hist_means}
means_sim <- NULL
for (j in 1:sims1) means_sim <- c(means_sim, mean(rexp(n1,lambda1)))
hist(means_sim)
```
source('~/.active-rstudio-document', echo=TRUE)
var_theory <- (1/lambda1)^2 / n1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
```{r variance}
var_theory <- (1/lambda1)^2 / n1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
```
compare theoretical and sample variance for mean distribution
```{r, variance}
var_theory <- (1/lambda1)^2 / n1
var_sim <- var(means_sim)
cat("\nvariance(theoretical) = ",var_theory,"   variance(simulation) = ",var_sim)
```
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(means_sim)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
qnorm
?qnorm
?ks.test()
?rnorm
nn <- rnorm(1000,5,sqrt(0.625))
nn
hist(nn)
hist(mean_means)
hist(means_sim)
ks.test(means_sim,nn)
qqnorm(means_sim)
qqline(means_sim)
ks.test(means_sim,nn)
hist(means_sim,
abline(v=1/lambda1,col=4,lwd=2))
hist(means_sim)
hist(means_sim),abline(v=1/lambda1,col=4,lwd=2))
hist(means_sim,abline(v=1/lambda1,col=4,lwd=2))
hist(means_sim,breaks=40,abline(v=1/lambda1,col=4,lwd=2))
hist(means_sim,breaks=40)
abline(v=1/lambda1,col=4,lwd=2)
?density
hist(means_sim,breaks=40,main="Histogram of Means for n=40 samples of Exponentials",
xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,breaks=40,main="Histogram of Means for n=",n1,"samples of Exponentials",
xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,breaks=40,main="Histogram of Means for n="+n1+"samples of Exponentials",
xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,breaks=40,main="Histogram of Means for n="||n1||"samples of Exponentials",
xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
paste("Histogram of Means for n=",n1,"samples of Exponentials")
hist(means_sim,main=paste("Histogram of Means for n=",n1," samples of Exponentials",sep=""),
breaks=40,xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,main=paste("Histogram of Means for n=",n1," samples of Exponentials",sep=""),
breaks=40,xlab="Sample Mean")
legend('topright', "Theoretical Mean",col=4)
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,main=paste("Histogram of Means for n=",n1," samples of Exponentials",sep=""),
breaks=40,xlab="Sample Mean")
legend('topright', "Theoretical Mean",lty=1,col=4)
abline(v=1/lambda1,col=4,lwd=2)
hist(means_sim,main=paste("Histogram of Means for n=",n1," samples of Exponentials",sep=""),
breaks=40,xlab="Sample Mean")
abline(v=1/lambda1,col=4,lwd=2)
legend('topright', "Theoretical Mean",lty=1,lwd=2,col=4)
hist(means_sim,main=paste("Histogram of Means for n=",n1," samples of Exponentials",sep=""),
breaks=40,xlab="Sample Mean")
abline(v=1/lambda1,col=2,lwd=2)
legend('topright', "Theoretical Mean",lty=1,lwd=2,col=2)
source('~/.active-rstudio-document', echo=TRUE)
qqnorm(means)
hist(means_sim,breaks=40,abline(v=1/lambda1,col=4,lwd=2))
qqline(means)
?qqline
quantile(means)
qqnorm(means)
qqline(means,probs=c(0.1,0.9))
?quantile()
quantile(means,probs=c(0,0.1,0.5,0.9,1))
?abline()
q1 <- quantile(means,probs=c(0,0.1,0.5,0.9,1.0))
print(q1)
str(q1)
q1[2]
q1[4]
print(q1[2],q1[4])
cat(q1[2],q1[4])
cat("10% quantile=",q1[2],"90%quantile=",q1[4])
q1[2]
str(q1[2])
q1[2]$name
name(q1[2])
names(q1[2])
str(names(q1[2]))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ToothGrowth
table(ToothGrowth)
table(ToothGrowth,dose,supp)
str(ToothGrowth)
?table
table(ToothGrowth$supp,ToothGrowth$dose)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
table(ToothGrowth$supp)
table(ToothGrowth$dose)
table(ToothGrowth$len)
table(dfToothGrowth$dose)
source('~/.active-rstudio-document', echo=TRUE)
table(dfToothGrowth$dose)
table(dtToothGrowth$dose)
table(ToothGrowth$dose)
table(ToothGrowth$dose,ToothGrowth$supp)
table(dfToothGrowth$dose,dfToothGrowth$supp)
table(dtToothGrowth$dose,dtToothGrowth$supp)
?table
?xtabs
xtabs(len ~ dose + supp, ToothGrowth)
xtabs(len ~ supp + dose, ToothGrowth)
ToothGrowth
?ToothGrowth
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?str
summary(ToothGrowth)
str(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
table(tdfToothGrowth$supp,tdfToothGrowth$dose)
source('~/.active-rstudio-document', echo=TRUE)
table(tdfToothGrowth$supp,tdfToothGrowth$dose)
ToothGrowth[ToothGrowth$dose %in% c(0.5,2.0),]
t.test(TG[TG$supp=="OJ",]
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
TG[TG$supp=="OJ","len"]
TG[TG$supp=="OJ"]$len
TG[TG$supp=="OJ",]$len
str(TG[TG$supp=="OJ",]$len)
str(TG[TG$supp=="OJ","len"])
t.test(TG[TG$supp=="OJ","len"],TG[TG$supp=="VC","len"],alternative="two.sided",paired=FALSE)
str(TG[TG$supp=="OJ","len"])
str(TG[TG$supp=="VC","len"])
OJ<-TG[TG$supp=="OJ","len"]
VC<-TG[TG$supp=="VC","len"]
OJ
VC
t.test(OJ,VC,alternative="two.sided",paired=FALSE)
warnings()
t.test(TG[TG$supp=="OJ"]$len,TG[TG$supp=="VC"]$len,alternative="two.sided",paired=FALSE)
OJ
VC
t.test(TG[TG$supp=="OJ"]$len,TG[TG$supp=="VC"]$len,alternative="two.sided",paired=FALSE)
t.test(len~supp, data=TG)
t.test(len~supp, data=TG, alternative="two.sided",paired=FALSE)
t.test(TG$len[TG$dose==1], TG$len[TG$dose==0.5], alternative="two.sided", paired=FALSE)
t.test(len~dose, data=TG[TG$dose %in% c(1.0,0.5),], alternative="two.sided",paired=FALSE)
t.test(len~dose, data=TG[TG$dose %in% c(0.5,1.0),], alternative="two.sided",paired=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?t.test
t.test(TG$len[TG$dose==0.5], TG$len[TG$dose==1.0], alternative="two.sided", var.equal=FALSE, paired=FALSE)
t.test(TG$len[TG$dose==0.5], TG$len[TG$dose==1.0], alternative="less", var.equal=FALSE, paired=FALSE)
t.test(TG$len[TG$dose==0.5], TG$len[TG$dose==1.0], alternative="greater", var.equal=FALSE, paired=FALSE)
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
X_test  <- read.table("./UCI HAR Dataset/test/X_test.txt")
X_all <- rbind(X_train, X_test)
S_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
S_test  <- read.table("./UCI HAR Dataset/test/subject_test.txt")
S_all <- rbind(S_train, S_test)
Y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
Y_test  <- read.table("./UCI HAR Dataset/test/y_test.txt")
Y_all <- rbind(Y_train, Y_test)
setwd("J:/Dropbox/Coursera-R/03GCD/proj1")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
X_test  <- read.table("./UCI HAR Dataset/test/X_test.txt")
X_all <- rbind(X_train, X_test)
S_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
S_test  <- read.table("./UCI HAR Dataset/test/subject_test.txt")
S_all <- rbind(S_train, S_test)
Y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
Y_test  <- read.table("./UCI HAR Dataset/test/y_test.txt")
Y_all <- rbind(Y_train, Y_test)
str(X_all)
str(Y_all)
str(S_all)
str(X_all)
head(X_all)
head(Y_all)
head(S_all)
head(X_all)
setwd("J:/Dropbox/Coursera-R/03GCD")
setwd("J:/Dropbox/Coursera-R/03GCD/CleaningData_Project")
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
?write.table()
write.table(outData, "./HAR_TidyData.txt", row.names=FALSE, sep=",")
write.table(outData, "./HAR_TidyData.txt", row.names=TRUE, sep=",")
tmp
head(tmp)
#cols = outCols
#cols
cntCols
#cols = cntCols
#cols
$cols = cntCols
?tolower
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
head(activities)
Y_all
head(activities)
activities$V2[2]
activities$V2[6]
names(activities)=c("index","desc")
head(activities)
activities[,1]
length(activities$code)
length(activities$code)
a=4
a
activities[a,2]
activities$desc[2]
activities$desc[a]
length(activities[,1])
nrow(activities)
activities[, 2]
activities$desc
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
str(CD)
str(outData)
activities$desc
head(CD,22)
?sort
outData
outData[1:3,]
outData[,1:3]
outData[,1:2]
sort(outData[,1:2],partial=1)
sort(outData[,1:2],partial=c(1))
?sort.list
str(outData)
sort(outData[,1])
outSort <- outData[order(subject),]
outSort <- outData[order(outData$subject),]
outSort
outSort[,1:2]
outSort[,1:4]
outData[,1:4]
xx<-str(sortData)
xx<-str(outSort)
xx
source('J:/Dropbox/Coursera-R/03GCD/CleaningData_Project/run_analysis.R')
?str
str(outSort)
head(outSort)
head(outSort,15)
head(outSort,10)
head(outSort,10)
